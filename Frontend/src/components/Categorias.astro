---
import { apiFetch } from "../utils/api";

// Definir tipos TypeScript
interface Empresa {
    id: string;
    nombre: string;
    descripcion: string | null;
    email: string | null;
    telefono: string | null;
    sitio_web: string | null;
    direccion: string;
    latitud: number | null;
    longitud: number | null;
    img_url: string | null;
    categoria_id: string | null;
    created_at: string;
}

interface Categoria {
    id: string;
    nombre: string;
}

interface CategoriaConImagen {
    id: string;
    nombre: string;
    imagen: string | null;
    empresasCount: number;
}

// Función para obtener las categorías desde el backend
async function obtenerCategorias(): Promise<Categoria[]> {
    try {
        const response = await apiFetch("/categorias");
        if (!response.ok) {
            throw new Error("Error al obtener categorías");
        }
        return await response.json();
    } catch (error) {
        console.error("Error al obtener categorías:", error);
        return [];
    }
}

// Función para obtener las empresas desde el backend
async function obtenerEmpresas(): Promise<Empresa[]> {
    try {
        const response = await apiFetch("/empresas");
        if (!response.ok) {
            throw new Error("Error al obtener empresas");
        }
        return await response.json();
    } catch (error) {
        console.error("Error al obtener empresas:", error);
        return [];
    }
}

// Obtener datos
const categorias = await obtenerCategorias();
const empresas = await obtenerEmpresas();

// Filtrar categorías de emergencia
const categoriasExcluidas = [
    "hospitales",
    "policía",
    "bomberos",
    "farmacias",
];

const categoriasFiltradas = categorias.filter(
    (categoria) =>
        !categoriasExcluidas.some((excluida) =>
            categoria.nombre.toLowerCase().includes(excluida)
        )
);

// Crear array de categorías con sus imágenes y conteo de empresas
const categoriasConImagen: CategoriaConImagen[] = categoriasFiltradas
    .map((categoria) => {
        // Buscar empresas de esta categoría
        const empresasDeCategoria = empresas.filter(
            (empresa) => empresa.categoria_id === categoria.id
        );

        // Debug: mostrar información de empresas en esta categoría
        console.log(`Categoría: ${categoria.nombre} (${categoria.id})`);
        console.log(`Empresas en categoría: ${empresasDeCategoria.length}`);

        // Mostrar todas las empresas y sus imágenes
        empresasDeCategoria.forEach((empresa, index) => {
            console.log(`  Empresa ${index + 1}: ${empresa.nombre}`);
            console.log(`  img_url: "${empresa.img_url}"`);
            console.log(
                `  img_url válida: ${!!(empresa.img_url && empresa.img_url.trim() !== "")}`
            );
        });

        // Buscar la primera empresa con imagen de esta categoría
        const empresaConImagen = empresasDeCategoria.find((empresa) => {
            const tieneImagen =
                empresa.img_url &&
                empresa.img_url.trim() !== "" &&
                empresa.img_url !== "null" &&
                empresa.img_url !== "undefined";

            if (tieneImagen) {
                console.log(
                    `  ✓ Empresa con imagen encontrada: ${empresa.nombre} - ${empresa.img_url}`
                );
            }

            return tieneImagen;
        });

        // Usar imagen de empresa o null si no hay
        const imagen = empresaConImagen?.img_url || null;

        console.log(`  Imagen final para categoría: ${imagen}`);
        console.log(`  ---`);

        return {
            id: categoria.id,
            nombre: categoria.nombre,
            imagen: imagen,
            empresasCount: empresasDeCategoria.length,
        };
    })
    .filter((categoria) => categoria.empresasCount > 0); // Solo mostrar categorías que tienen empresas

// Debug final
console.log("=== RESUMEN FINAL ===");
categoriasConImagen.forEach((cat) => {
    console.log(
        `${cat.nombre}: ${cat.imagen ? "CON IMAGEN" : "SIN IMAGEN"} (${cat.empresasCount} empresas)`
    );
});
---

<link rel="stylesheet" href="/src/style/categorias-component.css">

<section class="cat-actividades-empresas">
    <h2 id="titulo-categorias">Explora lo mejor de San Rafael</h2>
    <div class="cat-grid-actividades">
        {
            categoriasConImagen.map((categoria: CategoriaConImagen) => (
                <div class="cat-card-actividad">
                    {categoria.imagen ? (
                        <img
                            src={categoria.imagen}
                            alt={categoria.nombre}
                            onerror={`console.error('Error cargando imagen para ${categoria.nombre}:', '${categoria.imagen}'); this.style.display='none'; this.parentElement.querySelector('.cat-placeholder-imagen').style.display='flex';`}
                            onload={`console.log('✓ Imagen cargada correctamente para ${categoria.nombre}:', '${categoria.imagen}');`}
                        />
                    ) : null}
                    <div
                        class="cat-placeholder-imagen"
                        style={
                            categoria.imagen
                                ? "display: none;"
                                : "display: flex;"
                        }>
                        <svg
                            width="60"
                            height="60"
                            viewBox="0 0 60 60"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg">
                            <rect
                                width="60"
                                height="60"
                                rx="12"
                                fill="#e0e0e0"
                            />
                            <path
                                d="M15 45L22.5 30L37.5 45H15Z"
                                fill="#bdbdbd"
                            />
                            <circle cx="22.5" cy="24" r="4.5" fill="#bdbdbd" />
                        </svg>
                        <div style="position: absolute; bottom: 10px; left: 50%; transform: translateX(-50%); font-size: 12px; color: #666;">
                            Sin imagen
                        </div>
                    </div>
                    <div class="cat-card-content">
                        <h3>{categoria.nombre}</h3>
                        <p class="cat-descripcion">
                            Explora {categoria.empresasCount}{" "}
                            {categoria.empresasCount === 1
                                ? "empresa"
                                : "empresas"}{" "}
                            en esta categoría.
                        </p>
                        <a
                            href={`/empresas?categoria=${categoria.id}`}
                            class="cat-ver-mas">
                            Ver empresas
                        </a>
                    </div>
                </div>
            ))
        }
    </div>
</section>

<script>
    // Script para cambiar aleatoriamente la primera palabra del título
    document.addEventListener('DOMContentLoaded', function() {
        const titulo = document.getElementById('titulo-categorias');
        if (titulo && titulo.textContent) {
            const palabras = ['Explora', 'Encuentra'];
            const palabraAleatoria = palabras[Math.floor(Math.random() * palabras.length)];
            
            // Reemplazar solo la primera palabra manteniendo el resto del texto
            titulo.textContent = titulo.textContent.replace(/^(Explora|Encuentra)/, palabraAleatoria);
        }
    });
</script>

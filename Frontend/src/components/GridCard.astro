---
export interface ItemData {
  titulo: string;
  descripcion: string;
  imagen: string;
  tipo: string;
  ubicacion: string;
}

interface Props {
  items: ItemData[];
}

const { items = [] } = Astro.props as Props;
---

<style>
.grid-container {
  display: grid;
  grid-template-columns: repeat(auto-fill, 280px);
  gap: 1.5rem;
  padding: 1rem;
  width: 100%;
  max-width: 100%;
  box-sizing: border-box;
  justify-content: center; /* centra las cards */
}

  .card {
    background: white;
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    border: 1px solid #ccc;
    text-align: center;
    font-family: 'Open Sans', sans-serif;
    position: relative;
    width: 100%;
    height: auto;
    display: flex;
    flex-direction: column;
  }

.card img {
  width: 100%;
  max-height: 170px;
  object-fit: cover;
  display: block;
}


  .card-content {
    padding: 1rem;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }

  .card-content h3 {
    margin: 0 0 0.5rem 0;
    font-size: 1.1rem;
    color: #1A513B;
    font-weight: 700;
  }

  .card-content p {
    font-size: 0.95rem;
    color: #555;
    margin: 0 0 1rem 0;
    flex-grow: 1;
  }

  .card button {
    background: none;
    border: 1px solid #1A513B;
    border-radius: 8px;
    padding: 0.4rem 1rem;
    color: #1A513B;
    font-weight: 500;
    cursor: pointer;
    transition: 0.2s;
    margin-top: auto;
  }

  .card button:hover {
    background: #1A513B;
    color: white;
  }

  /* Evitar conflictos con otros estilos */
  .grid-container * {
    box-sizing: border-box;
  }
</style>

<div class="grid-container" id="grid-container">
  {items.map((item: ItemData) => (
    <div class="card">
      <img src={item.imagen} alt={item.titulo} />
      <div class="card-content">
        <h3>{item.titulo}</h3>
        <p>{item.descripcion}</p>
        <button>Ver MÃ¡s</button>
      </div>
    </div>
  ))}
</div>

---
import AdminPanel from "../../components/AdminPanel.astro";
import TableAdmin from "../../components/TableAdmin.astro";
import { AdminMenu } from "../../components/AdminMenu";

// Obtener parámetros de filtro de la URL
const { searchParams } = Astro.url;
const nombreFiltro = searchParams.get('nombre') || '';

// Construir la URL de la API con los filtros
let apiUrl = 'http://localhost:3000/api/categorias';
const filtros = [];
if (nombreFiltro) filtros.push(`nombre=${encodeURIComponent(nombreFiltro)}`);
if (filtros.length > 0) {
  apiUrl += `?${filtros.join('&')}`;
}

// Obtener categorías desde la API
const response = await fetch(apiUrl);
let categorias = [];

if (response.ok) {
  categorias = await response.json();
} else {
  console.error('Error al cargar categorías:', response.statusText);
  // Usar datos de respaldo en caso de error
  categorias = [
    { id: 'cat1', nombre: "Naturaleza" },
    { id: 'cat2', nombre: "Gastronomía" },
    { id: 'cat3', nombre: "Cultural" },
  ];
}

// Definir columnas para la tabla
const columnas = [
  { key: 'id', label: 'ID', editable: false },
  { key: 'nombre', label: 'Nombre', editable: true, required: true }
];
---

<link rel="stylesheet" href="/src/style/atractivos.css">
<link rel="stylesheet" href="/src/style/modal.css">

<AdminPanel menu={AdminMenu}>
  <div class="admin-content">
    <div class="header">
      <h1>Categorías</h1>
      <a href="/admin/categorias-nueva" class="btn-nuevo">+ Nueva Categoría</a>
    </div>
    
    <!-- Filtros -->
    <div class="filtros-container">
      <form id="filtros-form" method="get" class="filtros">
        <div class="filtro filtro-nombre">
          <label for="nombre">Nombre de Categoría:</label>
          <input type="text" id="nombre" name="nombre" value={nombreFiltro} placeholder="Buscar...">
        </div>
        
        <div class="filtros-botones">
          <button type="submit" class="btn-filtrar">Filtrar</button>
          <a href="/admin/categorias" class="btn-limpiar">Limpiar</a>
        </div>
      </form>
    </div>
    
    <!-- Tabla de categorías -->
    <table>
      <thead>
        <tr>
          <th>ID</th>
          <th>Nombre</th>
          <th>Acciones</th>
        </tr>
      </thead>
      <tbody>        {categorias.length > 0 ? (
          categorias.map((cat: any) => (
            <tr>
              <td>{cat.id}</td>
              <td>{cat.nombre}</td>              <td class="acciones">
                <button class="btn-editar" data-id={cat.id} data-nombre={cat.nombre}>Editar</button>
                <button class="btn-eliminar" data-id={cat.id} data-nombre={cat.nombre}>Eliminar</button>
              </td>
            </tr>
          ))
        ) : (
          <tr>
            <td colspan="3" class="sin-resultados">
              No se encontraron categorías
            </td>
          </tr>
        )}
      </tbody>
    </table>
  </div>
  <!-- Modal para crear nueva categoría -->
  <div id="modal-nueva-categoria" class="modal-overlay hidden">
    <div class="modal">
      <div class="modal-header">
        <h3>Nueva Categoría</h3>
      </div>
      <div class="modal-body">
        <form id="form-nueva-categoria" class="modal-form">
          <div class="modal-form-group">
            <label for="nueva-nombre">Nombre:</label>
            <input type="text" id="nueva-nombre" name="nombre" required class="form-control">
          </div>
          
          <div class="modal-actions">
            <button type="submit" class="modal-btn modal-btn-primary">Guardar</button>
            <button type="button" class="modal-btn modal-btn-secondary" id="btn-cancelar-nueva">Cancelar</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Modal de confirmación de eliminación -->
  <div id="modal-confirmar-eliminar" class="modal-overlay hidden">
    <div class="modal">
      <div class="modal-header">
        <h3>Confirmar eliminación</h3>
      </div>
      <div class="modal-body">
        <p id="texto-confirmar-eliminar">¿Estás seguro de que deseas eliminar esta categoría?</p>
          <div class="modal-actions">
          <button class="modal-btn modal-btn-danger" id="btn-confirmar-eliminar">Eliminar</button>
          <button class="modal-btn modal-btn-secondary" id="btn-cancelar-confirmar">Cancelar</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal de notificación -->
  <div id="modal-notificacion" class="modal-overlay hidden">
    <div class="modal">
      <div class="modal-header">
        <h3 id="titulo-notificacion">Notificación</h3>
      </div>
      <div class="modal-body">
        <p id="texto-notificacion"></p>
        
        <div class="modal-actions">
          <button class="modal-btn modal-btn-primary" id="btn-aceptar-notificacion">Aceptar</button>
        </div>
      </div>
    </div>
  </div>  <!-- Modal de edición directa -->
  <div id="modal-editar-categoria" class="modal-overlay hidden">
    <div class="modal">
      <div class="modal-header">
        <h3>Editar categoría</h3>
      </div>
      <div class="modal-body">
        <form id="form-editar-categoria" class="modal-form">
          <input type="hidden" id="categoria-id-editar" value="">
          
          <div class="modal-form-group">
            <label for="nombre-editar">Nuevo nombre:</label>
            <input type="text" id="nombre-editar" name="nombre" class="form-control" required>
          </div>
          
          <div class="modal-actions">
            <button type="submit" class="modal-btn modal-btn-primary">Guardar cambios</button>
            <button type="button" class="modal-btn modal-btn-secondary" id="btn-cancelar-editar">Cancelar</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</AdminPanel>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Modal para nueva categoría
    const btnNuevo = document.querySelector('.btn-nuevo');    const modalNueva = document.getElementById('modal-nueva-categoria');
    const formNueva = document.getElementById('form-nueva-categoria');
    const btnCancelarNueva = document.getElementById('btn-cancelar-nueva');
      // Elementos del modal de eliminación
    const btnEliminar = document.querySelectorAll('.btn-eliminar');
    const modalConfirmarEliminar = document.getElementById('modal-confirmar-eliminar');
    const btnCancelarConfirmar = document.getElementById('btn-cancelar-confirmar');
    const btnConfirmarEliminar = document.getElementById('btn-confirmar-eliminar');
    const modalNotificacion = document.getElementById('modal-notificacion');
    const btnAceptarNotificacion = document.getElementById('btn-aceptar-notificacion');    // Elementos del modal de edición
    const btnEditar = document.querySelectorAll('.btn-editar');
    const modalEditarCategoria = document.getElementById('modal-editar-categoria');
    const formEditarCategoria = document.getElementById('form-editar-categoria');
    const btnCancelarEditar = document.getElementById('btn-cancelar-editar');
    const inputNombreEditar = document.getElementById('nombre-editar') as HTMLInputElement;
      // Variables para almacenar datos del elemento seleccionado
    let currentId: string | null = null;
    let currentNombre: string | null = null;
    
    // Función para mostrar notificación
    function mostrarNotificacion(titulo: string, mensaje: string, esExito: boolean = true, recargar: boolean = true) {
      const tituloNotificacion = document.getElementById('titulo-notificacion');
      const textoNotificacion = document.getElementById('texto-notificacion');
      
      if (tituloNotificacion) {
        tituloNotificacion.textContent = titulo;
        tituloNotificacion.style.color = esExito ? '#1A513B' : '#d9534f';
      }
      
      if (textoNotificacion) {
        textoNotificacion.textContent = mensaje;
      }
      
      if (modalNotificacion) {
        modalNotificacion.classList.remove('hidden');
        
        if (btnAceptarNotificacion) {
          btnAceptarNotificacion.onclick = () => {
            modalNotificacion.classList.add('hidden');
            if (recargar) {
              window.location.reload();
            }
          };
        }
      }
    }
    
    // Abrir modal de nueva categoría
    if (btnNuevo && modalNueva) {
      btnNuevo.addEventListener('click', (e) => {
        e.preventDefault();
        modalNueva.classList.remove('hidden');
      });
    }
    
    // Cancelar nueva categoría
    if (btnCancelarNueva && modalNueva) {
      btnCancelarNueva.addEventListener('click', () => {
        modalNueva.classList.add('hidden');
      });
    }
      // Enviar formulario de nueva categoría
    if (formNueva) {
      formNueva.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const nombreInput = document.getElementById('nueva-nombre') as HTMLInputElement;
        if (!nombreInput) return;
        
        const nombre = nombreInput.value;
        
        try {
          const response = await fetch('http://localhost:3000/api/categorias', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ nombre })
          });
          
          if (response.ok) {
            if (modalNueva) {
              modalNueva.classList.add('hidden');
            }
            mostrarNotificacion('¡Éxito!', `Categoría "${nombre}" creada correctamente`, true);
          } else {
            mostrarNotificacion('Error', 'No se pudo crear la categoría', false, false);
          }
        } catch (error) {
          console.error('Error:', error);
          mostrarNotificacion('Error', 'Ha ocurrido un error al crear la categoría', false, false);
        }
      });
    }
      // Modal de Eliminar
    if (btnEliminar && modalConfirmarEliminar) {
      btnEliminar.forEach((btn: Element) => {
        btn.addEventListener('click', () => {
          currentId = btn.getAttribute('data-id');
          currentNombre = btn.getAttribute('data-nombre');
          
          // Mostrar el nombre de la categoría en el modal
          const eliminarNombre = document.getElementById('eliminar-nombre');
          if (eliminarNombre) {
            eliminarNombre.textContent = currentNombre;
          }
          
          // Configurar texto de confirmación
          const textoConfirmar = document.getElementById('texto-confirmar-eliminar');
          if (textoConfirmar) {
            textoConfirmar.textContent = `¿Estás seguro de que deseas eliminar la categoría "${currentNombre}"?`;
          }
          
          // Mostrar modal de confirmación
          if (modalConfirmarEliminar) {
            modalConfirmarEliminar.classList.remove('hidden');
          }
        });
      });
    }
    
    // Botón Cancelar confirmación
    if (btnCancelarConfirmar && modalConfirmarEliminar) {
      btnCancelarConfirmar.addEventListener('click', () => {
        modalConfirmarEliminar.classList.add('hidden');
      });
    }
    
    // Botón Confirmar eliminación
    if (btnConfirmarEliminar && modalConfirmarEliminar) {
      btnConfirmarEliminar.addEventListener('click', async () => {
        modalConfirmarEliminar.classList.add('hidden');
        
        try {
          const response = await fetch(`http://localhost:3000/api/categorias/${currentId}`, {
            method: 'DELETE'
          });
          
          const data = await response.json();
          
          if (response.ok) {
            mostrarNotificacion('¡Éxito!', `Categoría "${currentNombre}" eliminada correctamente`, true);
          } else {
            mostrarNotificacion('Error', data.error || 'No se pudo eliminar la categoría', false, false);
          }
        } catch (error) {
          console.error('Error:', error);
          mostrarNotificacion('Error', 'Ha ocurrido un error durante la eliminación', false, false);
        }
      });
    }    // Modal de Edición
    if (btnEditar && modalEditarCategoria) {
      btnEditar.forEach((btn: Element) => {
        btn.addEventListener('click', (e: Event) => {
          e.preventDefault();
          
          currentId = btn.getAttribute('data-id');
          currentNombre = btn.getAttribute('data-nombre');
          
          // Llenar el campo de edición con el nombre actual
          const categoriaIdEditar = document.getElementById('categoria-id-editar') as HTMLInputElement;
          if (categoriaIdEditar && currentId) {
            categoriaIdEditar.value = currentId;
          }
          
          if (inputNombreEditar && currentNombre) {
            inputNombreEditar.value = currentNombre;
            
            // Enfocar y seleccionar el texto del campo para facilitar la edición
            setTimeout(() => {
              if (inputNombreEditar) {
                inputNombreEditar.focus();
                inputNombreEditar.select();
              }
            }, 100);
          }
          
          // Mostrar modal de edición
          if (modalEditarCategoria) {
            modalEditarCategoria.classList.remove('hidden');
          }
        });
      });
    }
    
    // Botón Cancelar edición
    if (btnCancelarEditar && modalEditarCategoria) {
      btnCancelarEditar.addEventListener('click', () => {
        modalEditarCategoria.classList.add('hidden');
      });
    }
      // Enviar formulario de edición
    if (formEditarCategoria) {
      formEditarCategoria.addEventListener('submit', async (e: SubmitEvent) => {
        e.preventDefault();
        
        const categoriaId = (document.getElementById('categoria-id-editar') as HTMLInputElement).value;
        const nuevoNombre = (document.getElementById('nombre-editar') as HTMLInputElement).value;
        
        if (!categoriaId || !nuevoNombre) return;
        
        try {
          const response = await fetch(`http://localhost:3000/api/categorias/${categoriaId}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ nombre: nuevoNombre })
          });
            if (response.ok) {
            if (modalEditarCategoria) {
              modalEditarCategoria.classList.add('hidden');
            }
            mostrarNotificacion('¡Éxito!', `Categoría actualizada correctamente a "${nuevoNombre}"`, true);
          } else {
            const data = await response.json();
            mostrarNotificacion('Error', data.error || 'No se pudo actualizar la categoría', false, false);
          }
        } catch (error) {
          console.error('Error:', error);
          mostrarNotificacion('Error', 'Ha ocurrido un error durante la actualización', false, false);
        }
      });
    }
      // Cerrar modales haciendo clic fuera
    [modalConfirmarEliminar, modalNotificacion, modalEditarCategoria, modalNueva].forEach(modal => {
      if (modal) {
        modal.addEventListener('click', (e: MouseEvent) => {
          if (e.target === modal) {
            modal.classList.add('hidden');
          }
        });
      }
    });
  });
</script>
